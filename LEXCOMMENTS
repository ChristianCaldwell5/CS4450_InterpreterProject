.l and .y files cant have comments so this is a temporary file for comments
If anything is wrong here please feel free to correct

Note: Most of this code is the same as the Piethon example. I dont know what we will or wont need so this is just a foundation so that we can build everything else. Obviously 
      we will have to either change alot of this code as needed or site this code to avoid plagiarizing.

%option noyywrap    //I believe this is supposed to make it so that the parser does not try and read unto another file. without this you can chain multiple files into the args 
                      when you  run the program
%option yylineno    //This is supposed to keep a count of what line the parser is on as the global variable yylineno we may not need it but just in case

%{
    //this is where all of the C++ code goes including headers and any function declarations we will use
    #include <string>
    #include <sstream>
    
%}

//Regular expressions go here
identity [_a-zA-Z][_0-9a-zA-Z]*
int   [0-9]+
float [0-9]*\.[0-9]+

%%


"#"[^\r\n]* {   continue;       }
[ \t]       {   continue;       } 
"+"         { return yytext[0]; }
"-"         { return yytext[0]; }
"*"         { return yytext[0]; }
"/"         { return yytext[0]; }
"%"         { return yytext[0]; }
"^"         { return yytext[0]; }
"("         { return yytext[0]; }
")"         { return yytext[0]; }
"="         { return yytext[0]; }
":"         { return yytext[0]; }
","         { return yytext[0]; }
"<"         { return yytext[0]; }
">"         { return yytext[0]; }
"+="        { return PLUSEQ;    }
"-="        { return MINUSEQ;   }
"*="        { return MULTEQ;    }
"/="        { return DIVEQ;     }
"%="        { return MODEQ;     }
"^="        { return POWEQ;     }
"++"        { return INC;       }
"--"        { return DEC;       }
"<="        { return LE;        }
">="        { return GE;        }
"=="        { return EQ;        }
"!="        { return NE;        }
"if"        { return IF;        }
"else"      { return ELSE;      }
"def"       { return DEF;       }
"while"     { return WHILE;     }
"print"     { return PRINT;     }
"end"       { return END;       }
"return"    { return RETURN;    }

{identity}  { yylval.ident = new char[strlen(yytext)+1];
           strcpy(yylval.ident, yytext);
           return IDENT;
         }

{float}  { istringstream(string(yytext)) >> yylval.floatVal;
           return FLOATNUM;
         }

{int}    { istringstream(string(yytext)) >> yylval.intVal;
           return INTNUM;

.           {} //This is where exceptions and errors should be called

%%
